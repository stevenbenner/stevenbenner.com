---
import { getEntry } from 'astro:content';
import { Image } from 'astro:assets';
import BaseLayout from './BaseLayout.astro';
import OutdatedWarning from '../components/OutdatedWarning.astro'
import Comment from '../components/Comment.astro';
import { site } from '../data/config.json';

const { frontmatter, id } = Astro.props;
const postComments = await getEntry('comments', id);
const msPerYear = 365 * 24 * 60 * 60 * 1000;
const postAgeYears = Math.abs((frontmatter.pubDate - new Date()) / msPerYear);
const showOutdatedWarning = frontmatter.transitory && postAgeYears > 5;
---

<BaseLayout pageTitle={frontmatter.title} pageDescription={frontmatter.description}>
	<p>
		<time datetime={frontmatter.pubDate.toISOString()} itemprop="published">
		{
			new Intl.DateTimeFormat(
				site.language,
				{ year: 'numeric', month: 'long', day: 'numeric' }
			).format(frontmatter.pubDate)
		}
		</time>
	</p>
	{ showOutdatedWarning && <OutdatedWarning date={frontmatter.pubDate} /> }
	{ frontmatter.image && <Image src={frontmatter.image.src} alt={frontmatter.image.alt} class="thumbnail" /> }
	<slot />
	{ postComments && <h3>Comments</h3> }
	{
		postComments && postComments.data.toReversed().map((comment) => (
			<Comment
				author={comment.author_name}
				isPostAuthor={comment.author === 2}
				url={comment.author_url}
				avatar={comment.author_avatar_urls['48']}
				date={new Date(comment.date_gmt)}
				content={comment.content.rendered}
			/>
		))
	}
</BaseLayout>
